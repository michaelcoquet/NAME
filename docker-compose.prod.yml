version: "3.8"

services:
  web:
    restart: on-failure
    container_name: name
    build: 
      context: ./
      dockerfile: Dockerfile.prod
    volumes:
      - ./static:/static
    ports:
      - ${NAME_PORT}:${NAME_PORT}
    expose: 
      - "8000"
    env_file:
      - ./env/.env.prod
    depends_on:
      - data
      - redis
    entrypoint: ["./entrypoint.prod.sh"]
    networks:
      - app-network
      - nginx-network

  data:
    container_name: data
    image: postgres:latest
    env_file:
      - ./env/.env.prod
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - APP_DB_USER=${APP_DB_USER}
      - APP_DB_PASS=${APP_DB_PASS}
      - APP_DB_NAME=${APP_DB_NAME}
    volumes:
      - ./db:/docker-entrypoint-initdb.d/
      - ./db/data:/var/lib/postgresql/data
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    networks:
      - app-network 

  celery:
    restart: always
    build: 
      context: ./
      dockerfile: Dockerfile.prod
    env_file:
      - ./env/.env.prod
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${APP_DB_NAME}
      - DB_HOST=${POSTGRES_HOST}
      - DB_USER=${APP_DB_USER}
      - DB_PASS=${APP_DB_PASS}
      - DB_NAME=${APP_DB_NAME}
    depends_on:
      - rabbit
    entrypoint: ["./celery_entrypoint.sh"]
    networks:
      - app-network 

  rabbit:
    restart: always
    hostname: rabbit
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBIT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_PASS}
    ports:
      - ${RABBIT_PORT}:${RABBIT_PORT}
    networks:
      - app-network 

  redis:
    image: redis:6.0-buster
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    networks:
      - app-network
    expose: 
      - ${REDIS_PORT}
      
  nginx:
    build: 
      context: ./
      dockerfile: Dockerfile.prod
    volumes:
      - ./static:/static
    ports:
      - "443:443"
    depends_on:
      - web
    entrypoint: ["./nginx_entrypoint.sh"]
    networks:
      - nginx-network

networks:
  app-network:
    driver: bridge
  nginx-network:
    driver: bridge
    
volumes:
  data:
    external: true