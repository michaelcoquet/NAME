version: "3.8"

services:
  web:
    restart: on-failure
    build: 
      context: ./
      dockerfile: ./Dockerfiles/prod/Dockerfile
    image: mcoquet2/name_app:web
    volumes:
      - ./static:/static
    ports:
      - ${NAME_PORT}:${NAME_PORT}
    expose:
      - ${NAME_PORT}
    env_file:
      - ./env/.env.prod
    entrypoint: ["./scripts/entrypoints/prod/main.sh"]
    networks:
      - app-network
      - nginx-network

  data:
    container_name: data
    image: postgres:latest
    env_file:
      - env/.env.prod
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_NAME=${POSTGRES_NAME}
    volumes:
      - ./db:/docker-entrypoint-initdb.d/
      - ./db/data:/var/lib/postgresql/data
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    networks:
      - app-network

  celery:
    restart: always
    build: 
      context: ./
      dockerfile: ./Dockerfiles/prod/Dockerfile
    image: mcoquet2/name_app:celery
    env_file:
      - ./env/.env.prod
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_NAME}
      - DB_HOST=${POSTGRES_HOST}
      - DB_USER=${POSTGRES_USER}
      - DB_PASS=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_NAME}
    entrypoint: ["./scripts/entrypoints/prod/celery.sh"]
    networks:
      - app-network 

  rabbit:
    restart: always
    hostname: rabbit
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBIT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_PASS}
    ports:
      - ${RABBIT_PORT}:${RABBIT_PORT}
    networks:
      - app-network 

  flower:
    build: 
      context: ./
      dockerfile: ./Dockerfiles/prod/Dockerfile
    image: mher/flower
    ports:
      - ${FLOWER_PORT}:${FLOWER_PORT}
    env_file:
      - env/.env.prod
    environment: 
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
    depends_on: 
      - rabbit
    entrypoint: ["./scripts/entrypoints/prod/flower.sh"]
    networks:
        - app-network

  redis:
    image: redis:6.0-buster
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    networks:
      - app-network
    expose: 
      - ${REDIS_PORT}

  nginx:
    build: 
      context: ./
      dockerfile: ./Dockerfiles/prod/Dockerfile.nginx
    image: mcoquet2/name_app:nginx
    volumes:
      - ./static:/static
    ports:
      - "443:443"
      - "80:80"
    expose:
      - "443"
      - "80"
    environment: 
      - PROXY_SOCK=${PROXY_SOCK}
    depends_on: 
      - web
    entrypoint: ["./scripts/entrypoints/prod/nginx.sh"]
    networks: 
      - nginx-network

networks:
  app-network:
    driver: bridge
  nginx-network:
    driver: bridge

volumes:
  data:
    external: true
  static:
    external: true
