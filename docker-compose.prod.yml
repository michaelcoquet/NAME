version: "3.8"

services:
  web:
    restart: on-failure
    container_name: name
    build: 
      context: ./
      dockerfile: Dockerfile.prod
    image: mcoquet2/name_app:web
    volumes:
      - ./static:/static
    ports:
      - ${NAME_PORT}:${NAME_PORT}
    expose: 
      - "8000"
      - "3000"
    env_file:
      - ./env/.env.prod
    entrypoint: ["./entrypoint.prod.sh"]
    networks:
      - app-network
      - nginx-network

  # data:
  #   container_name: data
  #   image: postgres:latest
  #   env_file:
  #     - ./env/.env.prod
  #   environment:
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #     - APP_DB_USER=${POSTGRES_USER}
  #     - APP_DB_PASS=${POSTGRES_PASSWORD}
  #     - APP_DB_NAME=${POSTGRES_NAME}
  #   volumes:
  #     - ./db:/docker-entrypoint-initdb.d/
  #     - ./db/data:/var/lib/postgresql/data
  #   ports:
  #     - ${POSTGRES_PORT}:${POSTGRES_PORT}
  #   networks:
  #     - app-network 

  celery:
    restart: always
    build: 
      context: ./
      dockerfile: Dockerfile.prod
    image: mcoquet2/name_app:celery
    env_file:
      - ./env/.env.prod
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_NAME}
      - DB_HOST=${POSTGRES_HOST}
      - DB_USER=${POSTGRES_USER}
      - DB_PASS=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_NAME}
    entrypoint: ["./celery_entrypoint.sh"]
    networks:
      - app-network 

  # rabbit:
  #   restart: always
  #   hostname: rabbit
  #   image: rabbitmq:3-management
  #   environment:
  #     - DEFAULT_USER=${RABBIT_USER}
  #     - DEFAULT_PASS=${RABBIT_PASS}
  #   ports:
  #     - ${RABBIT_PORT}:${RABBIT_PORT}
  #   networks:
  #     - app-network 

  redis:
    image: redis:6.0-buster
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    networks:
      - app-network
    expose: 
      - ${REDIS_PORT}
      
  nginx:
    build: 
      context: ./
      dockerfile: Dockerfile.prod
    image: mcoquet2/name_app:nginx
    volumes:
      - ./static:/static
    ports:
      - "443:443"
    entrypoint: ["./nginx_entrypoint.prod.sh"]
    networks:
      - nginx-network

networks:
  app-network:
    driver: bridge
  nginx-network:
    driver: bridge
    
# volumes:
#   data:
#     external: true