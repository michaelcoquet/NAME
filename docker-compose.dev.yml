version: "3.8"

services:
  web:
    restart: on-failure
    container_name: name
    build: ./
    ports:
      - ${NAME_PORT}:${NAME_PORT}
      - ${DEBUG_PORT}:${DEBUG_PORT}
    env_file:
      - .env.dev
    depends_on:
      - data
      - flower
      - redis
    entrypoint: ["./entrypoint.dev.sh"]
    networks:
      - app-network 

  data:
    container_name: data
    image: postgres:latest
    env_file:
      - .env.dev
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - APP_DB_USER=${POSTGRES_USER}
      - APP_DB_PASS=${POSTGRES_PASSWORD}
      - APP_DB_NAME=${POSTGRES_NAME}
    volumes:
      - ./db:/docker-entrypoint-initdb.d/
      - ./db/data:/var/lib/postgresql/data
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    networks:
      - app-network 

  celery:
    restart: always
    build:
      context: .
    env_file:
      - .env.dev
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_NAME}
      - DB_HOST=${POSTGRES_HOST}
      - DB_USER=${POSTGRES_USER}
      - DB_PASS=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_NAME}
    depends_on:
      - rabbit
    entrypoint: ["./celery_entrypoint.sh"]
    networks:
      - app-network 

  rabbit:
    restart: always
    hostname: rabbit
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBIT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_PASS}
    ports:
      - ${RABBIT_PORT}:${RABBIT_PORT}
    networks:
      - app-network 

  flower:
    build:
      context: .
    image: mher/flower
    ports:
      - ${FLOWER_PORT}:${FLOWER_PORT}
    env_file:
      - .env.dev
    environment: 
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
    depends_on: 
      - rabbit
    entrypoint: ["./flower_entrypoint.sh"]
    networks:
        - app-network

  redis:
    image: redis:6.0-buster
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    networks:
      - app-network
    expose: 
      - ${REDIS_PORT}

networks:
  app-network:
    driver: bridge
    
volumes:
  data:
    external: true